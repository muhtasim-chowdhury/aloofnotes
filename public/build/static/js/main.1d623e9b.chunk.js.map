{"version":3,"sources":["components/Navbar.js","queries/index.js","components/NewNote.js","components/Notes.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","id","React","Component","getAllNotesQuery","gql","_templateObject","addNoteMutation","_templateObject2","NewNote","state","title","text","disabled","handleChange","event","_this","setState","Object","defineProperty","target","name","value","document","getElementById","length","handleClick","stopPropagation","props","displayTitleInputBox","turnOnTitleBox","handleAddNote","mutate","console","log","preventDefault","variables","input","_this2","this","react_apollo_browser_umd","mutation","update","cache","result","allNotes","readQuery","query","writeQuery","data","concat","addNote","onSubmit","bind","onClick","placeholder","onChange","note","type","Notes","createNotes","_ref","map","key","contentEditable","suppressContentEditableWarning","_ref2","loading","error","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","turnOffTitleBox","noteTitle","newNoteChildComponent","myUri","client","ApolloClient","uri","Navbar_Navbar","NewNote_NewNote","ref","Notes_Notes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d623e9b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Navbar.css'\r\n\r\nexport default class Navbar extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className='nav'>\r\n                <span id='home'>Home</span>\r\n            </div>\r\n        )\r\n    }\r\n}","import gql from 'graphql-tag'\r\n\r\nexport const getAllNotesQuery = gql`\r\n                {\r\n                    allNotes: getAllNotes{\r\n                        id\r\n                        title\r\n                        text\r\n                        created\r\n                    }\r\n                }\r\n                `\r\nexport const addNoteMutation = gql`\r\n    mutation change($input:NewNote) {\r\n        addNote(input:$input) {\r\n        id\r\n        title\r\n        text\r\n        created\r\n        }\r\n    }\r\n`\r\n","import React from 'react'\r\nimport {Mutation} from 'react-apollo'\r\nimport {addNoteMutation, getAllNotesQuery} from '../queries/index'\r\nimport './NewNote.css'\r\n\r\nexport default class NewNote extends React.Component{\r\n    state = {title: \"\", text:\"\", disabled:true}\r\n    \r\n    // let user type into the box\r\n    handleChange = (event)=> {\r\n        this.setState({[event.target.name]: event.target.value})\r\n\r\n        if (document.getElementById('text').value.length === 0) this.setState({disabled: true})\r\n        else this.setState({disabled: false})\r\n    }\r\n    \r\n    // turn on title input box\r\n    handleClick = (event) => {\r\n        // prevent confliction with handleClick on the parent component\r\n        event.stopPropagation()\r\n        if(!this.props.displayTitleInputBox)\r\n            this.props.turnOnTitleBox()\r\n    }\r\n\r\n    handleAddNote = (mutate, event)=> {\r\n        console.log('handleAddNote')\r\n        event.preventDefault()\r\n        const title = event.target[0].value\r\n        const text = event.target[1].value\r\n\r\n        // clear form\r\n        event.target[0].value = '' // cannot clear title, most likely bug with react or js itself, NOT my code\r\n        event.target[1].value = ''\r\n        // disable button\r\n        this.setState({disabled: true})\r\n\r\n        // make request\r\n        mutate(\r\n            {variables: \r\n                { input: \r\n                    {\r\n                        \"title\": title,\r\n                        \"text\": text\r\n                    } \r\n                }\r\n            }\r\n        )\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <Mutation mutation={addNoteMutation}\r\n            update={(cache, result)=> {\r\n                console.log('update')\r\n                console.log('result in update', result)\r\n                let {allNotes} = cache.readQuery({query: getAllNotesQuery })\r\n                console.log('allNotes', allNotes)\r\n                cache.writeQuery({\r\n                    query: getAllNotesQuery,\r\n                    data: {allNotes: allNotes.concat([result.data.addNote])}\r\n                })\r\n            }}\r\n            >\r\n            {\r\n                (mutate, result) => {\r\n                    console.log('result in renderProp', result)\r\n                    return (\r\n                        <div id='addNoteContainer'>\r\n                            <form id='addNoteForm' onSubmit={this.handleAddNote.bind(this, mutate)} onClick={this.handleClick}>\r\n                                {\r\n                                    this.props.displayTitleInputBox ? \r\n                                    <input className='addNoteInput' placeholder=\"Add title\" name='title'\r\n                                    value={this.state.title}\r\n                                    onChange={this.handleChange}/> : null\r\n                                }\r\n                                <br/>\r\n                                <input id='text' className='addNoteInput' placeholder=\"Add a note\" name='text'\r\n                                value={this.state.note} \r\n                                onChange={this.handleChange}/>\r\n                                <button id='addNoteButton' type='submit' disabled={this.state.disabled}>Add</button>\r\n                            </form>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n            </Mutation>\r\n        )\r\n    }\r\n}","import React from 'react' \r\nimport {Query} from 'react-apollo'\r\nimport {getAllNotesQuery} from '../queries'\r\nimport './Notes.css'\r\n\r\nexport default class Notes extends React.Component{\r\n\r\n    // by the way, this query will execute upon every rerender\r\n    // make sure theres not too mant rerenders\r\n    createNotes = ({allNotes})=> {\r\n        console.log('allNotes in notes.js', allNotes)\r\n        return (\r\n            <div id='allNotesContainer'>\r\n                {\r\n                    // TODO: remove suppressContentEditableWarning={true} ??\r\n                    allNotes.map(\r\n                        note => {\r\n                            return (\r\n                                <div id='noteBox' key={note.id}>\r\n                                    <span contentEditable id='noteTitle' suppressContentEditableWarning={true}>{note.title}</span>\r\n                                    <br/>\r\n                                    <span contentEditable id='noteText' suppressContentEditableWarning={true}>{note.text}</span>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n        \r\n        \r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Query\r\n                query={getAllNotesQuery}>\r\n                \r\n                {\r\n                    ({ loading, error, data }) => {\r\n                    if (loading) return <p>Loading...</p>\r\n                    if (error) {\r\n                        console.log(error)\r\n                        return 'error'\r\n                    }               \r\n                    return this.createNotes(data)\r\n                    }\r\n                }\r\n                \r\n  </Query>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport Navbar from './components/Navbar'\nimport NewNote from './components/NewNote'\nimport Notes from './components/Notes';\nimport {ApolloProvider} from 'react-apollo'\nimport ApolloClient from 'apollo-boost'\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {displayTitleInputBox: false}\n    let myUri = 'http://localhost:5000/graphql'\n    if (process.env.NODE_ENV === 'production') myUri = '/graphql'\n    this.client = new ApolloClient({uri:myUri})\n    // TODO: change uri when you are deploying\n  }\n\n\n  turnOnTitleBox = () => this.setState({displayTitleInputBox: true})\n  \n  turnOffTitleBox = () => {\n    // retriving a state variable from the child component 'NewNote'\n    const noteTitle = this.newNoteChildComponent.state.title\n\n    // don't hide title box if there is text in it\n    if(this.state.displayTitleInputBox && noteTitle.length === 0)\n      this.setState({displayTitleInputBox: false})\n  }\n\n\n  render() {\n    return (\n      <ApolloProvider client={this.client} >\n        <div onClick={this.turnOffTitleBox}>\n          <Navbar/>\n          <NewNote displayTitleInputBox={this.state.displayTitleInputBox} turnOnTitleBox={this.turnOnTitleBox}\n          ref={(newNoteChildComponent)=> this.newNoteChildComponent = newNoteChildComponent}/>\n          <br/><br/>\n          <Notes/>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}